# SpectaQL Configuration for Nutrifit Meal API
#
# Generates interactive API documentation from GraphQL schema
# Output: backend/docs/api/index.html
#
# Usage:
#   npx spectaql spectaql.yaml
#   OR
#   make docs

spectaql:
  # Output directory
  targetDir: ./docs/api

  # Theme customization
  themeOptions:
    primaryColor: '#4CAF50'      # Nutrifit green
    secondaryColor: '#FF9800'    # Orange accent
    backgroundColor: '#FFFFFF'
    textColor: '#212121'

  # Logo (optional - uncomment if logo available)
  # logoFile: ./docs/logo.png

  # Favicon (optional)
  # faviconFile: ./docs/favicon.ico

introspection:
  # GraphQL schema file (exported from Strawberry)
  schemaFile: ./graphql/schema.graphql

  # Alternative: introspection URL (for running server)
  # url: http://localhost:8080/graphql
  # headers:
  #   Authorization: Bearer ${ADMIN_TOKEN}

info:
  # API metadata
  title: Nutrifit Meal API v2.0
  description: |
    # Nutrifit Meal Domain API

    Complete GraphQL API for meal recognition, nutrition tracking, and food logging.

    ## üöÄ Features
    - üì∏ **AI Photo Recognition**: OpenAI Vision for automatic food detection
    - üè∑Ô∏è **Barcode Scanning**: OpenFoodFacts integration for packaged foods
    - üìù **Text Analysis**: Natural language meal logging
    - ü•ó **USDA Enrichment**: Comprehensive nutrition data from USDA FoodData Central
    - üìä **Analytics**: Daily summaries, meal history, search

    ## üîÑ Workflow

    ### Photo Analysis
    1. Upload photo to storage (external service)
    2. Call `analyzeMealPhoto` mutation with photo URL
    3. Review AI-detected food items and quantities
    4. Confirm analysis with `confirmMealAnalysis` (select items to keep)
    5. Query meal data with `meal` or `mealHistory`

    ### Barcode Scanning
    1. Scan barcode with device camera
    2. Call `analyzeMealBarcode` mutation with barcode
    3. Adjust quantity if needed
    4. Confirm analysis

    ### Manual Entry
    1. Call `analyzeMealDescription` mutation with text description
    2. Review parsed items
    3. Confirm analysis

    ## üîê Authentication
    All requests require user authentication via `userId` parameter.
    Production deployment uses JWT tokens in `Authorization` header.

    ## üìñ API Structure

    ### Query.atomic
    Utility queries for testing individual capabilities:
    - `recognizeFood`: Test vision provider (photo/text ‚Üí food items)
    - `enrichNutrients`: Test nutrition provider (label ‚Üí nutrients)
    - `searchFoodByBarcode`: Test barcode provider (barcode ‚Üí product)

    ### Query.meals
    Aggregate queries for meal data:
    - `meal`: Get single meal by ID
    - `mealHistory`: List meals with filters and pagination
    - `searchMeals`: Full-text search in meals
    - `dailySummary`: Aggregate nutrition by day

    ### Mutation.meal
    Commands for meal operations:
    - `analyzeMealPhoto`: Analyze food photo
    - `analyzeMealBarcode`: Scan product barcode
    - `analyzeMealDescription`: Parse text description
    - `confirmMealAnalysis`: Confirm analysis (2-step process)
    - `updateMeal`: Update meal metadata
    - `deleteMeal`: Soft delete meal

  version: 2.0.0
  contact:
    name: Nutrifit API Team
    email: support@nutrifit.app
    url: https://nutrifit.app

  license:
    name: Proprietary
    url: https://nutrifit.app/terms

servers:
  - url: http://localhost:8080/graphql
    description: Local Development
    production: false

  # Uncomment for production/staging environments
  # - url: https://staging.nutrifit.app/graphql
  #   description: Staging
  #   production: false
  #
  # - url: https://api.nutrifit.app/graphql
  #   description: Production
  #   production: true

# Example queries (shown in interactive docs)
examples:
  - name: "Example: Analyze Meal Photo"
    query: |
      mutation AnalyzePhoto {
        meal {
          analyzeMealPhoto(
            input: {
              userId: "user_123"
              photoUrl: "https://storage.example.com/meals/pasta.jpg"
              dishHint: "carbonara"
              mealType: LUNCH
            }
          ) {
            ... on MealAnalysisSuccess {
              meal {
                id
                dishName
                confidence
                confirmed
                entries {
                  id
                  label
                  displayName
                  quantityG
                  confidence
                  nutrients {
                    calories
                    protein
                    carbs
                    fat
                  }
                }
                totalCalories
                totalProtein
              }
              warnings
            }
            ... on MealAnalysisError {
              code
              message
              details
            }
          }
        }
      }

  - name: "Example: Confirm Analysis"
    query: |
      mutation ConfirmMeal {
        meal {
          confirmMealAnalysis(
            input: {
              mealId: "meal_xyz123"
              userId: "user_123"
              confirmedEntryIds: ["entry_1", "entry_2"]
            }
          ) {
            ... on ConfirmationSuccess {
              meal {
                id
                confirmed
                confirmedAt
                entries {
                  id
                  displayName
                  quantityG
                  nutrients {
                    calories
                  }
                }
              }
            }
            ... on ConfirmationError {
              code
              message
            }
          }
        }
      }

  - name: "Example: Daily Summary"
    query: |
      query DailySummary {
        meals {
          dailySummary(
            userId: "user_123"
            date: "2025-10-26"
          ) {
            ... on DailySummary {
              date
              totalCalories
              totalProtein
              totalCarbs
              totalFat
              totalFiber
              totalSugar
              totalSodium
              mealCount
              byMealType {
                mealType
                mealCount
                calories
                protein
                carbs
                fat
              }
            }
            ... on DailySummaryError {
              code
              message
            }
          }
        }
      }

  - name: "Example: Barcode Scan"
    query: |
      mutation ScanBarcode {
        meal {
          analyzeMealBarcode(
            input: {
              userId: "user_123"
              barcode: "3017620422003"
              quantityG: 100.0
              mealType: SNACK
            }
          ) {
            ... on MealAnalysisSuccess {
              meal {
                id
                entries {
                  displayName
                  brand
                  imageUrl
                  servingSizeG
                  nutrients {
                    calories
                    protein
                    carbs
                    fat
                  }
                }
              }
            }
            ... on MealAnalysisError {
              code
              message
            }
          }
        }
      }

  - name: "Example: Meal History"
    query: |
      query MealHistory {
        meals {
          mealHistory(
            userId: "user_123"
            startDate: "2025-10-20"
            endDate: "2025-10-26"
            mealType: LUNCH
            limit: 20
            offset: 0
          ) {
            meals {
              id
              dishName
              mealType
              timestamp
              totalCalories
              entryCount
            }
            totalCount
            hasMore
          }
        }
      }

  - name: "Example: Search Meals"
    query: |
      query SearchMeals {
        meals {
          searchMeals(
            userId: "user_123"
            query: "chicken pasta"
            limit: 10
          ) {
            meals {
              id
              dishName
              entries {
                displayName
                quantityG
              }
              totalCalories
            }
            totalCount
          }
        }
      }

# Extensions to ignore (reduces output clutter)
extensions:
  ignoreIntrospectionExtensions:
    - specifiedByUrl
