[project]
name = "nutrifit-backend"
version = "0.6.1"
description = "Nutrifit backend subgraph (FastAPI + Strawberry)"
authors = [ { name = "Nutrifit Team" } ]
readme = "README.md"
requires-python = ">=3.11,<3.12"
license = { text = "Proprietary" }
dependencies = [
  "fastapi==0.120.0",
  "uvicorn==0.38.0",
  "strawberry-graphql==0.284.1",
  "httpx==0.28.1",
  "pyyaml==6.0.3",
  "openai>=2.5.0",
  "pydantic>=2.12.3",
  "circuitbreaker>=1.4.0",
  "tenacity>=8.2.0",
  "flake8>=7.3.0",
  "aiohttp>=3.13.1",
  "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
  "pytest>=8.4.2",
  "pytest-asyncio>=0.23.0",
  "pytest-cov>=4.1.0",
  "mypy>=1.18.2",
  "flake8>=7.0.0",
  "black>=25.9.0",
  "ruff>=0.14.2",
  "types-PyYAML"
]

[tool.mypy]
python_version = "3.11"
strict = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
exclude = ["^\\.venv/", "^dist/", "^build/", "^tests/unit/infrastructure/test_openai_client\\.py$", "^tests/unit/infrastructure/test_usda_client\\.py$", "^tests/unit/infrastructure/test_openfoodfacts_client\\.py$"]
explicit_package_bases = true
plugins = ["strawberry.ext.mypy_plugin"]
# Nota: plugin Strawberry abilita validazioni base su resolver e schema.

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_untyped_calls = false

[tool.black]
line-length = 100
exclude = "(\\.venv/|dist/|build/)"

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503"]
exclude = [
  ".venv",
  "dist",
  "build"
]

[tool.pytest.ini_options]
addopts = "-q"
# Aggiungiamo anche 'backend' per consentire import 'app' quando pytest parte dalla root repo.
pythonpath = [".", "backend"]

# Separate test configurations
testpaths = ["tests"]

# Markers for different test types
markers = [
    "unit: Unit tests (isolated, no dependencies)",
    "integration: Integration tests (with real dependencies)",
    "integration_real: Integration tests with real external APIs (opt-in, requires API keys)",
    "e2e: End-to-end tests (full system)"
]

[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["."]
# Include tutti i pacchetti top-level (directory con __init__.py) ad eccezione dei test
include = ["*"]
exclude = ["tests*"]
