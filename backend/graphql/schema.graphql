"""
Canonical GraphQL SDL.
Percorso canonico: backend/graphql/schema.graphql
Mirror obbligatorio: graphql/schema.graphql (root)

Non modificare solo uno dei due file.
Workflow aggiornamento:
    1. make -C backend schema-export   # genera runtime SDL
    2. make -C backend schema-sync     # copia e aggiorna hash
    3. make -C backend schema-check    # verifica drift (CI gate)

Modifiche manuali devono essere replicate nel mirror prima del commit.
Qualsiasi ricomparsa di backend/backend/graphql/schema.graphql è un errore e va rimossa.
"""
type ActivityEvent {
  userId: String!
  ts: String!
  steps: Int
  caloriesOut: Float
  hrAvg: Float
  source: ActivitySource!
}

input ActivityMinuteInput {
  ts: String!
  steps: Int = 0
  caloriesOut: Float = null
  hrAvg: Float = null
  source: ActivitySource! = MANUAL
}

enum ActivitySource {
  APPLE_HEALTH
  GOOGLE_FIT
  MANUAL
}

type AggregateQueries {
  meal(mealId: String!, userId: String!): Meal
  mealHistory(userId: String!, startDate: DateTime = null, endDate: DateTime = null, mealType: String = null, limit: Int! = 20, offset: Int! = 0): MealHistoryResult!
  searchMeals(userId: String!, queryText: String!, limit: Int! = 20, offset: Int! = 0): MealSearchResult!
  dailySummary(userId: String!, date: DateTime!): DailySummary!
}

input AnalyzeMealBarcodeInput {
  userId: String!
  barcode: String!
  quantityG: Float!
  mealType: MealType! = SNACK
  timestamp: DateTime = null
  idempotencyKey: String = null
}

input AnalyzeMealPhotoInput {
  userId: String!
  photoUrl: String!
  dishHint: String = null
  mealType: MealType! = LUNCH
  timestamp: DateTime = null
  idempotencyKey: String = null
}

type AtomicQueries {
  recognizeFood(photoUrl: String = null, text: String = null, dishHint: String = null): FoodRecognitionResult!
  enrichNutrients(label: String!, quantityG: Float!): NutrientProfile
  searchFoodByBarcode(barcode: String!): BarcodeProduct
}

type BarcodeProduct {
  barcode: String!
  name: String!
  brand: String
  nutrients: NutrientProfile
  servingSizeG: Float
  imageUrl: String
}

type CacheStats {
  keys: Int!
  hits: Int!
  misses: Int!
}

type ConfirmAnalysisError {
  message: String!
  code: String!
}

input ConfirmAnalysisInput {
  mealId: String!
  userId: String!
  confirmedEntryIds: [String!]!
}

type ConfirmAnalysisSuccess {
  meal: Meal!
  confirmedCount: Int!
  rejectedCount: Int!
}

union ConfirmAnalysisSuccessConfirmAnalysisError = ConfirmAnalysisSuccess | ConfirmAnalysisError

type DailySummary {
  date: DateTime!
  totalCalories: Float!
  totalProtein: Float!
  totalCarbs: Float!
  totalFat: Float!
  totalFiber: Float!
  mealCount: Int!
  breakdownByType: String!
  hasMeals: Boolean!
}

"""Date with time (isoformat)"""
scalar DateTime

type DeleteMealError {
  message: String!
  code: String!
}

input DeleteMealInput {
  mealId: String!
  userId: String!
}

type DeleteMealSuccess {
  mealId: String!
  message: String!
}

union DeleteMealSuccessDeleteMealError = DeleteMealSuccess | DeleteMealError

type FoodRecognitionResult {
  items: [RecognizedFood!]!
  averageConfidence: Float!
}

type HealthTotalsDelta {
  id: String!
  userId: String!
  date: String!
  timestamp: String!
  stepsDelta: Int!
  caloriesOutDelta: Float!
  stepsTotal: Int!
  caloriesOutTotal: Float!
  hrAvgSession: Float
}

input HealthTotalsInput {
  timestamp: String!
  date: String!
  steps: Int!
  caloriesOut: Float!
  hrAvgSession: Float = null
  userId: String = null
}

type IngestActivityResult {
  accepted: Int!
  duplicates: Int!
  rejected: [RejectedActivityEvent!]!
  idempotencyKeyUsed: String
}

type Meal {
  id: String!
  userId: String!
  timestamp: DateTime!
  mealType: MealType!
  dishName: String!
  imageUrl: String
  source: String!
  confidence: Float!
  entries: [MealEntry!]!
  notes: String
  analysisId: String
  totalCalories: Int!
  totalProtein: Float!
  totalCarbs: Float!
  totalFat: Float!
  totalFiber: Float!
  totalSugar: Float!
  totalSodium: Float!
  createdAt: DateTime!
  updatedAt: DateTime
  entryCount: Int!
  averageConfidence: Float!
}

type MealAnalysisError {
  message: String!
  code: String!
}

type MealAnalysisSuccess {
  meal: Meal!
  analysisId: String
  processingTimeMs: Int
}

union MealAnalysisSuccessMealAnalysisError = MealAnalysisSuccess | MealAnalysisError

type MealEntry {
  id: String!
  name: String!
  displayName: String!
  quantityG: Float!
  calories: Int!
  protein: Float!
  carbs: Float!
  fat: Float!
  fiber: Float
  sugar: Float
  sodium: Float
  confidence: Float!
  barcode: String
}

type MealHistoryResult {
  meals: [Meal!]!
  totalCount: Int!
  hasMore: Boolean!
}

type MealMutations {
  analyzeMealPhoto(input: AnalyzeMealPhotoInput!): MealAnalysisSuccessMealAnalysisError!
  analyzeMealBarcode(input: AnalyzeMealBarcodeInput!): MealAnalysisSuccessMealAnalysisError!
  confirmMealAnalysis(input: ConfirmAnalysisInput!): ConfirmAnalysisSuccessConfirmAnalysisError!
  updateMeal(input: UpdateMealInput!): UpdateMealSuccessUpdateMealError!
  deleteMeal(input: DeleteMealInput!): DeleteMealSuccessDeleteMealError!
}

type MealSearchResult {
  meals: [Meal!]!
  totalCount: Int!
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

type Mutation {
  """Meal domain mutations (CQRS commands)"""
  meal: MealMutations!

  """Ingest batch minute activity events (idempotent)"""
  ingestActivityEvents(input: [ActivityMinuteInput!]!, idempotencyKey: String = null, userId: String = null): IngestActivityResult!

  """Sincronizza snapshot cumulativi attività"""
  syncHealthTotals(input: HealthTotalsInput!, idempotencyKey: String = null, userId: String = null): SyncHealthTotalsResult!
}

type NutrientProfile {
  calories: Float!
  protein: Float!
  carbs: Float!
  fat: Float!
  fiber: Float
  sugar: Float
  sodium: Float
  quantityG: Float!
}

type Product {
  barcode: String!
  name: String!
  brand: String
  category: String
  calories: Int
  protein: Float
  carbs: Float
  fat: Float
  fiber: Float
  sugar: Float
  sodium: Float
  imageUrl: String
}

type Query {
  hello: String!
  serverTime: String!
  health: String!

  """Fetch prodotto da OpenFoodFacts (cache)"""
  product(barcode: String!): Product

  """Atomic utility queries for testing capabilities"""
  atomic: AtomicQueries!

  """Aggregate meal data queries"""
  meals: AggregateQueries!

  """Lista eventi activity minuto (diagnostica)"""
  activityEntries(limit: Int! = 100, after: String = null, before: String = null, userId: String = null): [ActivityEvent!]!

  """Lista delta sync health totals per giorno"""
  syncEntries(date: String!, userId: String = null, after: String = null, limit: Int! = 200): [HealthTotalsDelta!]!

  """Statistiche cache prodotto"""
  cacheStats: CacheStats!
}

type RecognizedFood {
  label: String!
  displayName: String!
  quantityG: Float!
  confidence: Float!
}

type RejectedActivityEvent {
  index: Int!
  reason: String!
}

type SyncHealthTotalsResult {
  accepted: Boolean!
  duplicate: Boolean!
  reset: Boolean!
  idempotencyKeyUsed: String
  idempotencyConflict: Boolean!
  delta: HealthTotalsDelta
}

type UpdateMealError {
  message: String!
  code: String!
}

input UpdateMealInput {
  mealId: String!
  userId: String!
  mealType: MealType = null
  timestamp: DateTime = null
  notes: String = null
}

type UpdateMealSuccess {
  meal: Meal!
}

union UpdateMealSuccessUpdateMealError = UpdateMealSuccess | UpdateMealError
