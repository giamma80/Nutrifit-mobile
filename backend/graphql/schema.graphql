"""
Canonical GraphQL SDL.
Percorso canonico: backend/graphql/schema.graphql
Mirror obbligatorio: graphql/schema.graphql (root)

Non modificare solo uno dei due file.
Workflow aggiornamento:
    1. make -C backend schema-export   # genera runtime SDL
    2. make -C backend schema-sync     # copia e aggiorna hash
    3. make -C backend schema-check    # verifica drift (CI gate)

Modifiche manuali devono essere replicate nel mirror prima del commit.
Qualsiasi ricomparsa di backend/backend/graphql/schema.graphql è un errore e va rimossa.
"""
type ActivityEvent {
  userId: String!
  ts: String!
  steps: Int
  caloriesOut: Float
  hrAvg: Float
  source: ActivitySource!
}

input ActivityMinuteInput {
  ts: String!
  steps: Int = 0
  caloriesOut: Float = null
  hrAvg: Float = null
  source: ActivitySource! = MANUAL
}

enum ActivitySource {
  APPLE_HEALTH
  GOOGLE_FIT
  MANUAL
}

type CacheStats {
  keys: Int!
  hits: Int!
  misses: Int!
}

type DailySummary {
  date: String!
  userId: String!
  meals: Int!
  calories: Int!
  protein: Float
  carbs: Float
  fat: Float
  fiber: Float
  sugar: Float
  sodium: Float
  activitySteps: Int!
  activityCaloriesOut: Float!
  activityEvents: Int!
  caloriesDeficit: Int!
  caloriesReplenishedPercent: Int!
}

type HealthTotalsDelta {
  id: String!
  userId: String!
  date: String!
  timestamp: String!
  stepsDelta: Int!
  caloriesOutDelta: Float!
  stepsTotal: Int!
  caloriesOutTotal: Float!
  hrAvgSession: Float
}

input HealthTotalsInput {
  timestamp: String!
  date: String!
  steps: Int!
  caloriesOut: Float!
  hrAvgSession: Float = null
  userId: String = null
}

type IngestActivityResult {
  accepted: Int!
  duplicates: Int!
  rejected: [RejectedActivityEvent!]!
  idempotencyKeyUsed: String
}

input LogMealInput {
  name: String!
  quantityG: Float!
  timestamp: String = null
  barcode: String = null
  idempotencyKey: String = null
  userId: String = null
}

type MealEntry {
  id: String!
  userId: String!
  name: String!
  quantityG: Float!
  timestamp: String!
  barcode: String
  idempotencyKey: String
  nutrientSnapshotJson: String
  calories: Int
  protein: Float
  carbs: Float
  fat: Float
  fiber: Float
  sugar: Float
  sodium: Float
}

type Mutation {
  """Log di un pasto con arricchimento nutrienti se barcode noto"""
  logMeal(input: LogMealInput!): MealEntry!

  """Aggiorna un pasto esistente"""
  updateMeal(input: UpdateMealInput!): MealEntry!

  """Cancella un pasto"""
  deleteMeal(id: String!): Boolean!

  """Ingest batch minute activity events (idempotent)"""
  ingestActivityEvents(input: [ActivityMinuteInput!]!, idempotencyKey: String = null, userId: String = null): IngestActivityResult!

  """Sincronizza snapshot cumulativi attività"""
  syncHealthTotals(input: HealthTotalsInput!, idempotencyKey: String = null, userId: String = null): SyncHealthTotalsResult!

  """Analizza una foto di un pasto (stub AI Fase 0: risposta deterministica)"""
  analyzeMealPhoto(input: AnalyzeMealPhotoInput!): MealPhotoAnalysis!

  """Conferma elementi analisi foto e crea MealEntry corrispondenti"""
  confirmMealPhoto(input: ConfirmMealPhotoInput!): ConfirmMealPhotoResult!
}

type Product {
  barcode: String!
  name: String!
  brand: String
  category: String
  calories: Int
  protein: Float
  carbs: Float
  fat: Float
  fiber: Float
  sugar: Float
  sodium: Float
}

type Query {
  hello: String!
  serverTime: String!
  health: String!

  """Fetch prodotto da OpenFoodFacts (cache)"""
  product(barcode: String!): Product

  """Lista pasti più recenti (desc)"""
  mealEntries(limit: Int! = 20, after: String = null, before: String = null, userId: String = null): [MealEntry!]!

  """Riepilogo nutrienti per giorno (UTC)"""
  dailySummary(date: String!, userId: String = null): DailySummary!

  """Lista eventi activity minuto (diagnostica)"""
  activityEntries(limit: Int! = 100, after: String = null, before: String = null, userId: String = null): [ActivityEvent!]!

  """Lista delta sync health totals per giorno"""
  syncEntries(date: String!, userId: String = null, after: String = null, limit: Int! = 200): [HealthTotalsDelta!]!

  """Statistiche cache prodotto"""
  cacheStats: CacheStats!
}

type RejectedActivityEvent {
  index: Int!
  reason: String!
}

type SyncHealthTotalsResult {
  accepted: Boolean!
  duplicate: Boolean!
  reset: Boolean!
  idempotencyKeyUsed: String
  idempotencyConflict: Boolean!
  delta: HealthTotalsDelta
}

input UpdateMealInput {
  id: String!
  name: String = null
  quantityG: Float = null
  timestamp: String = null
  barcode: String = null
  userId: String = null
}

"""Stato elaborazione analisi foto pasto"""
enum MealPhotoAnalysisStatus {
  PENDING
  COMPLETED
  FAILED
}

type MealPhotoItemPrediction {
  label: String!
  confidence: Float!
  quantityG: Float
  calories: Int
  protein: Float
  carbs: Float
  fat: Float
  fiber: Float
  sugar: Float
  sodium: Float
}

type MealPhotoAnalysis {
  id: String!
  userId: String!
  status: MealPhotoAnalysisStatus!
  createdAt: String!
  items: [MealPhotoItemPrediction!]!
  rawJson: String
  idempotencyKeyUsed: String
}

input AnalyzeMealPhotoInput {
  photoId: String = null
  photoUrl: String = null
  userId: String = null
  idempotencyKey: String = null
}

input ConfirmMealPhotoInput {
  analysisId: String!
  acceptedIndexes: [Int!]!
  userId: String = null
  idempotencyKey: String = null
}

type ConfirmMealPhotoResult {
  analysisId: String!
  createdMeals: [MealEntry!]!
}
