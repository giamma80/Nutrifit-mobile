"""
Canonical GraphQL SDL.
Percorso canonico: backend/graphql/schema.graphql
Mirror obbligatorio: graphql/schema.graphql (root)

Non modificare solo uno dei due file.
Workflow aggiornamento:
    1. make -C backend schema-export   # genera runtime SDL
    2. make -C backend schema-sync     # copia e aggiorna hash
    3. make -C backend schema-check    # verifica drift (CI gate)

Modifiche manuali devono essere replicate nel mirror prima del commit.
Qualsiasi ricomparsa di backend/backend/graphql/schema.graphql è un errore e va rimossa.
"""
input LogMealInput {
  name: String!
  quantityG: Float!
  timestamp: String = null
  barcode: String = null
  idempotencyKey: String = null
  userId: String = null
}

type MealEntry {
  id: String!
  userId: String!
  name: String!
  quantityG: Float!
  timestamp: String!
  barcode: String
  idempotencyKey: String
  nutrientSnapshotJson: String
  calories: Int
  protein: Float
  carbs: Float
  fat: Float
  fiber: Float
  sugar: Float
  sodium: Float
}

type Mutation {
  """Log di un pasto con arricchimento nutrienti se barcode noto"""
  logMeal(input: LogMealInput!): MealEntry!
}

type Product {
  barcode: String!
  name: String!
  brand: String
  category: String
  calories: Int
  protein: Float
  carbs: Float
  fat: Float
  fiber: Float
  sugar: Float
  sodium: Float
}

type Query {
  hello: String!
  serverTime: String!
  health: String!

  """Fetch prodotto da OpenFoodFacts (cache)"""
  product(barcode: String!): Product

  """Lista pasti più recenti (ordinati per timestamp decrescente)"""
  mealEntries(limit: Int = 20, after: String, before: String, userId: String): [MealEntry!]!

  """Riepilogo nutrienti per giorno (UTC)"""
  dailySummary(date: String!, userId: String): DailySummary!
}

type DailySummary {
  date: String!
  userId: String!
  meals: Int!
  calories: Int!
  protein: Float
  carbs: Float
  fat: Float
  fiber: Float
  sugar: Float
  sodium: Float
}
