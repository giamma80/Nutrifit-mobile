name: backend-ci

on:
  push:
    paths:
      - 'backend/**'
      - 'CHANGELOG.md'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'

jobs:
  core:
    name: Backend core (lint/tests/schema via make preflight subset)
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "${HOME}/.local/bin" >> $GITHUB_PATH
      - name: Sync deps
        working-directory: backend
        run: uv sync --all-extras --dev
      - name: Preflight (subset no markdown/commitlint)
        working-directory: backend
        env:
          MD_MODE: git
          SKIP_MARKDOWN: "1"
          SKIP_COMMITLINT: "1"
        run: |
          ./make.sh preflight || true
          # Fallback selective enforcement: fail if format/lint/tests/schema failed in summary.
          if grep -q 'format *FAIL' logs/preflight_summary.log; then echo '::error::Format gate failed'; EXIT=1; fi || true
          if grep -q 'lint *FAIL' logs/preflight_summary.log; then echo '::error::Lint gate failed'; EXIT=1; fi || true
          if grep -q 'tests *FAIL' logs/preflight_summary.log; then echo '::error::Tests gate failed'; EXIT=1; fi || true
          if grep -q 'schema *FAIL' logs/preflight_summary.log; then echo '::error::Schema gate failed'; EXIT=1; fi || true
          if [ -n "${EXIT+x}" ]; then exit 1; fi
      - name: Upload preflight summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
            name: backend-preflight-core-summary
            path: backend/logs/preflight_summary.log
      - name: Export schema artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-schema
          path: backend/schema_export.graphql

  docker-integration:
    name: Docker build & integration tests
    runs-on: ubuntu-latest
    needs: core
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Docker Build (validation)
        run: docker build --build-arg VERSION=$(grep -m1 '^version' backend/pyproject.toml | sed -E 's/^[^0-9]*([0-9]+\.[0-9]+\.[0-9]+).*/\1/') -t nutrifit-backend:ci backend
      - name: Run container
        run: |
          docker run -d --rm -p 8080:8080 --name nutrifit-backend-ci nutrifit-backend:ci
          sleep 5
      - name: Integration test (health/version/graphql)
        working-directory: backend
        run: bash scripts/integration_test.sh
      - name: Stop container
        if: always()
        run: docker stop nutrifit-backend-ci || true

  maintenance:
    name: Maintenance (changelog + badges)
    needs: docker-integration
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "${HOME}/.local/bin" >> $GITHUB_PATH
      - name: Sync deps
        working-directory: backend
        run: uv sync --all-extras --dev
      - name: Generate changelog (auto)
        working-directory: backend
        run: |
          ./make.sh changelog || echo "Changelog generation failed (non-blocking)"
      - name: Schema drift & badge
        working-directory: backend
        run: |
          if ./make.sh schema-check; then STATUS=synced; else STATUS=drift; fi
          cd ..
          COLOR=lightgrey; if [ "$STATUS" = "synced" ]; then COLOR=brightgreen; else COLOR=orange; fi
          sed -i "s|schema_status-[a-zA-Z0-9_-]*-[a-zA-Z]*|schema_status-${STATUS}-${COLOR}|" README.md || true
      - name: Version badge
        run: |
          version=$(grep -m1 '^version' backend/pyproject.toml | sed -E 's/^[^=]+= *"([0-9]+\.[0-9]+\.[0-9]+)".*/\1/')
          sed -i "s|backend_version-[a-zA-Z0-9_.-]*-green|backend_version-${version}-green|" README.md || true
          sed -i "s|backend_version-loading-grey|backend_version-${version}-green|" README.md || true
      - name: Sync textual backend release line
        run: |
          version=$(grep -m1 '^version' backend/pyproject.toml | sed -E 's/^[^=]+= *"([0-9]+\.[0-9]+\.[0-9]+)".*/\1/')
          if grep -q 'Release corrente backend:' README.md; then
            sed -i "s/Release corrente backend: \`v[0-9]\+\.[0-9]\+\.[0-9]\+\`/Release corrente backend: \`v${version}\`/" README.md || true
          fi
      - name: Commit aggregated maintenance changes
        run: |
          if git diff --quiet -- README.md CHANGELOG.md; then
            echo "No maintenance changes"
            exit 0
          fi
          git config user.name "github-actions"
          git config user.email "actions@users.noreply.github.com"
          MSG="chore(maintenance): update changelog + badges + version line"
          git add README.md CHANGELOG.md || true
          git commit -m "$MSG" || exit 0
          git push

# NOTE:
# - Commitlint & Markdownlint centralizzati in backend-preflight.yml
# - Questo workflow si concentra su enforcement core + docker + maintenance.
